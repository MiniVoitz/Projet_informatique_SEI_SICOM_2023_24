# Regular Expressions for Lexemes

# Lexemes providing the code structure
comment           \#.*              # Matches Python-style comments
blank             [ \t]+            # Matches spaces and tabs
newline           \n+               # Matches one or more newline characters

# Lexemes describing different kinds of constants
paren::left       \(                # Matches a left parenthesis
paren::right      \)                # Matches a right parenthesis
brack::left       \[                # Matches a left bracket
brack::right      \]                # Matches a right bracket

integer::dec      [+\-]?[0-9]+      # Matches decimal integers, optionally signed
integer::hex      0x[0-9a-fA-F]+    # Matches hexadecimal integers, case insensitive

float             [0-9]*\.[0-9]+|[0-9]+\.[0-9]*    # Matches floating-point numbers
float::exp        [0-9]+\.?[0-9]*[eE][+\-]?[0-9]+  # Matches floating-point numbers in scientific notation

string            "([^"\\]|\\.)*"   # Matches strings, allowing for escaped characters
symbol            [a-zA-Z_][a-zA-Z0-9_]*           # Matches symbols/identifiers

pycst::None       None              # Matches the Python constant None
pycst::True       True              # Matches the Python constant True
pycst::False      False             # Matches the Python constant False

# Lexeme describing the mnemonics of the bytecode instruction set
insn              [A-Z_]+           # Matches bytecode instructions, uppercase with underscores

# Lexeme describing a directive that structures the bytecode
dir               \.[a-zA-Z_][a-zA-Z0-9_]*         # Matches dot-prefixed directives

# To create labels for structuring Python assembly code
colon             :                 # Matches a colon
